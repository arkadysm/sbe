
/**
  * @brief CAUTION: do not change this file - it is autogenerated.
  */

#pragma once

#include <common/xroad_string.h>
#include <stdint.h>
#include <stdbool.h>
#include <string.h>

#ifdef __cplusplus
extern "C"
{
#endif

typedef enum
{
   proto_log_level_error  = 1,
   proto_log_level_warn   = 2,
   proto_log_level_notice = 4,
   proto_log_level_info   = 8,
   proto_log_level_debug  = 16,
   proto_log_level_trace  = 32
} proto_log_level_t;

typedef void (*proto_logger_cback_t)(proto_log_level_t, const char*);

typedef enum
{
   proto_template_InstrRequest = 7011,
   proto_template_RequestFailed = 7012,
   proto_template_RequestSucceed = 7013,
   proto_template_InstrSetCQGNameRequest = 7014,
   proto_template_InstrListRequest = 7001,
   proto_template_InstrumentDefinition = 7002,
   proto_template_MdSubscribe = 7003,
   proto_template_MdUnsubscribe = 7004,
   proto_template_MdSubscriptionResult = 7005,
   proto_template_MdTrade = 7007,
   proto_template_MdQuote = 7008,
   proto_template_MdBook = 7009,
   proto_template_MdStatistic = 7010,
   proto_template_AccPosSubscribe = 7015,
   proto_template_AccPosUnsubscribe = 7016,
   proto_template_AccPosSubscriptionResult = 7017,
   proto_template_AccBalanceSubscribe = 7018,
   proto_template_AccBalanceUnsubscribe = 7019,
   proto_template_AccBalanceSubscriptionResult = 7020,
   proto_template_AccPosition = 7021,
   proto_template_AccBalance = 7022,
   proto_template_NewOrderSingle = 8000,
   proto_template_OrderAccepted = 8001,
   proto_template_OrderRejected = 8002,
   proto_template_CancelOrder = 8003,
   proto_template_CancelOrderRejected = 8004,
   proto_template_OrderCanceled = 8005,
   proto_template_ReplaceOrder = 8006,
   proto_template_ReplaceOrderRejected = 8007,
   proto_template_OrderReplaced = 8008,
   proto_template_Trade = 8009,
   proto_template_OrderExpired = 8010,
   proto_template_TrdCaptReport = 8011,
   proto_template_Ping = 9001,
   proto_template_Pong = 9002,
   proto_template_SystemState = 9003,
   proto_template_Heartbeat = 9004,
} proto_templates_t;

typedef enum
{
   proto_Exchange_Moex = 1,
   proto_Exchange_Xroad = 2,
   proto_Exchange_LSE = 3,
   proto_Exchange_CME = 4,
   proto_Exchange_NYSE = 5,
   proto_Exchange_NASDAQ = 6,
   proto_Exchange_NYMEX = 7,
   proto_Exchange_ICE = 8,
   proto_Exchange_Eurex = 9,
   proto_Exchange_CBOE = 10,
   proto_Exchange_COMEX = 11,
   proto_Exchange_IFUS = 12,
   proto_Exchange_BITFX = 13,
   proto_Exchange_POLOFX = 14,
   proto_Exchange_BITMEX = 15,
} proto_Exchange_t;

typedef enum
{
   proto_Side_Empty = '0',
   proto_Side_Buy = '1',
   proto_Side_Sell = '2',
} proto_Side_t;

typedef enum
{
   proto_FieldId_Empty = 0,
   proto_FieldId_OI = 1,
   proto_FieldId_Min = 2,
   proto_FieldId_Max = 4,
   proto_FieldId_Open = 8,
   proto_FieldId_High = 16,
   proto_FieldId_Low = 32,
   proto_FieldId_Last = 64,
   proto_FieldId_Volume = 128,
} proto_FieldId_t;

typedef enum
{
   proto_FieldType_Int16 = 1,
   proto_FieldType_Int32 = 2,
   proto_FieldType_Int64 = 3,
   proto_FieldType_UInt16 = 4,
   proto_FieldType_UInt32 = 5,
   proto_FieldType_UInt64 = 6,
   proto_FieldType_Double = 7,
   proto_FieldType_String = 8,
} proto_FieldType_t;

// market data type
typedef enum
{
   proto_MdType_Book = 1,
   proto_MdType_Trade = 2,
   proto_MdType_Quote = 4,
   proto_MdType_Statistic = 8,
} proto_MdType_t;

typedef enum
{
   proto_SubsActionType_Update = '1',
   proto_SubsActionType_Snapshot = '2',
   proto_SubsActionType_SnapshotUpdate = '3',
} proto_SubsActionType_t;

// market data subscription result
typedef enum
{
   proto_SubsResult_Subscribed = 0,
   proto_SubsResult_Unsubscribed = 1,
   proto_SubsResult_AlreadySubscribed = 2,
   proto_SubsResult_UnknownInsrument = 3,
   proto_SubsResult_TooManySubscriptions = 4,
   proto_SubsResult_InternalError = 5,
   proto_SubsResult_ExternalError = 6,
   proto_SubsResult_SenderNotFound = 7,
} proto_SubsResult_t;

typedef enum
{
   proto_TimeInForce_Day = '0',
   proto_TimeInForce_IOC = '3',
   proto_TimeInForce_FOK = '4',
} proto_TimeInForce_t;

typedef enum
{
   proto_OrdType_Market = '1',
   proto_OrdType_Limit = '2',
} proto_OrdType_t;

typedef enum
{
   proto_AlgoType_Regular = 'O',
   proto_AlgoType_TWAP = 'T',
   proto_AlgoType_VWAP = 'V',
   proto_AlgoType_Rake = 'R',
} proto_AlgoType_t;

typedef enum
{
   proto_OrdRejReason_Other = 1, // unspecified error
   proto_OrdRejReason_TooLate = 2, // order already in terminated state(filled, canceled, etc)
   proto_OrdRejReason_UnknownInstr = 3, // unknown instument
   proto_OrdRejReason_Duplicate = 4, // duplicate clord_id
   proto_OrdRejReason_ExceedLimit = 5, // one of order field has wrong value
   proto_OrdRejReason_ExchClosed = 6, // exchange has already closed
   proto_OrdRejReason_BrokerOpt = 7, // because of broker
   proto_OrdRejReason_WrongAccount = 8, // wrong order account
   proto_OrdRejReason_AlreadyInPending = 9, // order already in transition state
   proto_OrdRejReason_Unknown = 10, // uknown order
   proto_OrdRejReason_InternalError = 11, // internal error
   proto_OrdRejReason_TranLimit = 12, // exchange transaction limit exceeded
   proto_OrdRejReason_Removed = 13, // order has been removed
   proto_OrdRejReason_Guard = 14, // rejected by guard rules
} proto_OrdRejReason_t;

typedef enum
{
   proto_State_active = 1, // active
   proto_State_offline = 2, // offline
   proto_State_dead = 3, // dead
   proto_State_inactive = 4, // inactive
   proto_State_pending_active = 5, // pending active
   proto_State_pending_offline = 6, // pending offline
} proto_State_t;

// encoding types

typedef struct proto_default_encoder_s proto_InstrRequest_encoder_t;

typedef struct proto_default_encoder_s proto_RequestFailed_encoder_t;

typedef struct proto_default_encoder_s proto_RequestSucceed_encoder_t;

typedef struct proto_default_encoder_s proto_InstrSetCQGNameRequest_encoder_t;

typedef struct proto_default_encoder_s proto_InstrListRequest_encoder_t;

typedef struct proto_default_encoder_s proto_InstrumentDefinition_encoder_t;

typedef struct proto_default_encoder_s proto_MdSubscribe_encoder_t;

typedef struct proto_default_encoder_s proto_MdUnsubscribe_encoder_t;

typedef struct proto_default_encoder_s proto_MdSubscriptionResult_encoder_t;

typedef struct proto_default_encoder_s proto_MdTrade_encoder_t;

typedef struct proto_default_encoder_s proto_MdQuote_encoder_t;

typedef struct proto_MdBook_encoder_s proto_MdBook_encoder_t;

typedef struct proto_default_encoder_s proto_MdStatistic_encoder_t;

typedef struct proto_default_encoder_s proto_AccPosSubscribe_encoder_t;

typedef struct proto_default_encoder_s proto_AccPosUnsubscribe_encoder_t;

typedef struct proto_default_encoder_s proto_AccPosSubscriptionResult_encoder_t;

typedef struct proto_default_encoder_s proto_AccBalanceSubscribe_encoder_t;

typedef struct proto_default_encoder_s proto_AccBalanceUnsubscribe_encoder_t;

typedef struct proto_default_encoder_s proto_AccBalanceSubscriptionResult_encoder_t;

typedef struct proto_AccPosition_encoder_s proto_AccPosition_encoder_t;

typedef struct proto_AccBalance_encoder_s proto_AccBalance_encoder_t;

typedef struct proto_default_encoder_s proto_NewOrderSingle_encoder_t;

typedef struct proto_default_encoder_s proto_OrderAccepted_encoder_t;

typedef struct proto_default_encoder_s proto_OrderRejected_encoder_t;

typedef struct proto_default_encoder_s proto_CancelOrder_encoder_t;

typedef struct proto_default_encoder_s proto_CancelOrderRejected_encoder_t;

typedef struct proto_default_encoder_s proto_OrderCanceled_encoder_t;

typedef struct proto_default_encoder_s proto_ReplaceOrder_encoder_t;

typedef struct proto_default_encoder_s proto_ReplaceOrderRejected_encoder_t;

typedef struct proto_default_encoder_s proto_OrderReplaced_encoder_t;

typedef struct proto_default_encoder_s proto_Trade_encoder_t;

typedef struct proto_default_encoder_s proto_OrderExpired_encoder_t;

typedef struct proto_default_encoder_s proto_TrdCaptReport_encoder_t;

typedef struct proto_default_encoder_s proto_Ping_encoder_t;

typedef struct proto_default_encoder_s proto_Pong_encoder_t;

typedef struct proto_default_encoder_s proto_SystemState_encoder_t;

typedef struct proto_default_encoder_s proto_Heartbeat_encoder_t;

typedef struct proto_group_encoder_s proto_MdBook_bids_encoder_t;

typedef struct proto_group_encoder_s proto_MdBook_asks_encoder_t;

typedef struct proto_group_encoder_s proto_AccPosition_Position_encoder_t;

typedef struct proto_group_encoder_s proto_AccBalance_Balance_encoder_t;

// encoder

void* proto_create_encoder(proto_templates_t tid, char* data, size_t len, proto_logger_cback_t cback);

void proto_destroy_encoder(void* e);

// InstrRequest encoder
int32_t proto_InstrRequest_get_size(proto_InstrRequest_encoder_t* e);

int32_t proto_InstrRequest_set_req_id(proto_InstrRequest_encoder_t* e, uint32_t val);

int32_t proto_InstrRequest_set_instr_name(proto_InstrRequest_encoder_t* e, xroad_str_t val);

int32_t proto_InstrRequest_set_instr_class(proto_InstrRequest_encoder_t* e, xroad_str_t val);

// RequestFailed encoder
int32_t proto_RequestFailed_get_size(proto_RequestFailed_encoder_t* e);

int32_t proto_RequestFailed_set_req_id(proto_RequestFailed_encoder_t* e, uint32_t val);

// RequestSucceed encoder
int32_t proto_RequestSucceed_get_size(proto_RequestSucceed_encoder_t* e);

int32_t proto_RequestSucceed_set_req_id(proto_RequestSucceed_encoder_t* e, uint32_t val);

// InstrSetCQGNameRequest encoder
int32_t proto_InstrSetCQGNameRequest_get_size(proto_InstrSetCQGNameRequest_encoder_t* e);

int32_t proto_InstrSetCQGNameRequest_set_req_id(proto_InstrSetCQGNameRequest_encoder_t* e, uint32_t val);

int32_t proto_InstrSetCQGNameRequest_set_instr_name(proto_InstrSetCQGNameRequest_encoder_t* e, xroad_str_t val);

int32_t proto_InstrSetCQGNameRequest_set_cqg_name(proto_InstrSetCQGNameRequest_encoder_t* e, xroad_str_t val);

// InstrListRequest encoder
int32_t proto_InstrListRequest_get_size(proto_InstrListRequest_encoder_t* e);

int32_t proto_InstrListRequest_set_req_id(proto_InstrListRequest_encoder_t* e, uint32_t val);

int32_t proto_InstrListRequest_set_exch(proto_InstrListRequest_encoder_t* e, proto_Exchange_t val);

// InstrumentDefinition encoder
int32_t proto_InstrumentDefinition_get_size(proto_InstrumentDefinition_encoder_t* e);

int32_t proto_InstrumentDefinition_set_req_id(proto_InstrumentDefinition_encoder_t* e, uint32_t val);

int32_t proto_InstrumentDefinition_set_id(proto_InstrumentDefinition_encoder_t* e, uint64_t val);

int32_t proto_InstrumentDefinition_set_instr_name(proto_InstrumentDefinition_encoder_t* e, xroad_str_t val);

int32_t proto_InstrumentDefinition_set_instr_class(proto_InstrumentDefinition_encoder_t* e, xroad_str_t val);

int32_t proto_InstrumentDefinition_set_precision(proto_InstrumentDefinition_encoder_t* e, uint32_t val);

int32_t proto_InstrumentDefinition_set_lot_size(proto_InstrumentDefinition_encoder_t* e, uint32_t val);

int32_t proto_InstrumentDefinition_set_tick_size(proto_InstrumentDefinition_encoder_t* e, double val);

int32_t proto_InstrumentDefinition_set_tick_value(proto_InstrumentDefinition_encoder_t* e, double val);

int32_t proto_InstrumentDefinition_set_currency(proto_InstrumentDefinition_encoder_t* e, xroad_str_t val);

int32_t proto_InstrumentDefinition_set_cfi_code(proto_InstrumentDefinition_encoder_t* e, xroad_str_t val);

int32_t proto_InstrumentDefinition_set_exp_date(proto_InstrumentDefinition_encoder_t* e, uint64_t val);

int32_t proto_InstrumentDefinition_set_is_last(proto_InstrumentDefinition_encoder_t* e, uint8_t val);

int32_t proto_InstrumentDefinition_set_strike(proto_InstrumentDefinition_encoder_t* e, double val);

void proto_InstrumentDefinition_reset_strike(proto_InstrumentDefinition_encoder_t* e);

int32_t proto_InstrumentDefinition_set_exch(proto_InstrumentDefinition_encoder_t* e, proto_Exchange_t val);

int32_t proto_InstrumentDefinition_set_cqgName(proto_InstrumentDefinition_encoder_t* e, xroad_str_t val);

// MdSubscribe encoder
int32_t proto_MdSubscribe_get_size(proto_MdSubscribe_encoder_t* e);

int32_t proto_MdSubscribe_set_req_id(proto_MdSubscribe_encoder_t* e, uint32_t val);

int32_t proto_MdSubscribe_set_instr_id(proto_MdSubscribe_encoder_t* e, uint64_t val);

int32_t proto_MdSubscribe_set_type(proto_MdSubscribe_encoder_t* e, proto_MdType_t val);

int32_t proto_MdSubscribe_set_action(proto_MdSubscribe_encoder_t* e, proto_SubsActionType_t val);

int32_t proto_MdSubscribe_set_field_id(proto_MdSubscribe_encoder_t* e, proto_FieldId_t val);

int32_t proto_MdSubscribe_set_sender_id(proto_MdSubscribe_encoder_t* e, xroad_str_t val);

// MdUnsubscribe encoder
int32_t proto_MdUnsubscribe_get_size(proto_MdUnsubscribe_encoder_t* e);

int32_t proto_MdUnsubscribe_set_req_id(proto_MdUnsubscribe_encoder_t* e, uint32_t val);

int32_t proto_MdUnsubscribe_set_instr_id(proto_MdUnsubscribe_encoder_t* e, uint64_t val);

int32_t proto_MdUnsubscribe_set_sender_id(proto_MdUnsubscribe_encoder_t* e, xroad_str_t val);

int32_t proto_MdUnsubscribe_set_force(proto_MdUnsubscribe_encoder_t* e, uint8_t val);

// MdSubscriptionResult encoder
int32_t proto_MdSubscriptionResult_get_size(proto_MdSubscriptionResult_encoder_t* e);

int32_t proto_MdSubscriptionResult_set_req_id(proto_MdSubscriptionResult_encoder_t* e, uint32_t val);

int32_t proto_MdSubscriptionResult_set_instr_id(proto_MdSubscriptionResult_encoder_t* e, uint64_t val);

int32_t proto_MdSubscriptionResult_set_type(proto_MdSubscriptionResult_encoder_t* e, proto_MdType_t val);

int32_t proto_MdSubscriptionResult_set_field_id(proto_MdSubscriptionResult_encoder_t* e, proto_FieldId_t val);

int32_t proto_MdSubscriptionResult_set_result(proto_MdSubscriptionResult_encoder_t* e, proto_SubsResult_t val);

// MdTrade encoder
int32_t proto_MdTrade_get_size(proto_MdTrade_encoder_t* e);

int32_t proto_MdTrade_set_instr_id(proto_MdTrade_encoder_t* e, uint64_t val);

int32_t proto_MdTrade_set_price(proto_MdTrade_encoder_t* e, double val);

int32_t proto_MdTrade_set_qty(proto_MdTrade_encoder_t* e, double val);

int32_t proto_MdTrade_set_side(proto_MdTrade_encoder_t* e, proto_Side_t val);

int32_t proto_MdTrade_set_exch_ts(proto_MdTrade_encoder_t* e, uint64_t val);

int32_t proto_MdTrade_set_local_ts(proto_MdTrade_encoder_t* e, uint64_t val);

// MdQuote encoder
int32_t proto_MdQuote_get_size(proto_MdQuote_encoder_t* e);

int32_t proto_MdQuote_set_instr_id(proto_MdQuote_encoder_t* e, uint64_t val);

int32_t proto_MdQuote_set_bid_price(proto_MdQuote_encoder_t* e, double val);

int32_t proto_MdQuote_set_bid_qty(proto_MdQuote_encoder_t* e, double val);

int32_t proto_MdQuote_set_ask_price(proto_MdQuote_encoder_t* e, double val);

int32_t proto_MdQuote_set_ask_qty(proto_MdQuote_encoder_t* e, double val);

int32_t proto_MdQuote_set_exch_ts(proto_MdQuote_encoder_t* e, uint64_t val);

int32_t proto_MdQuote_set_local_ts(proto_MdQuote_encoder_t* e, uint64_t val);

// MdBook encoder
int32_t proto_MdBook_get_size(proto_MdBook_encoder_t* e);

int32_t proto_MdBook_set_instr_id(proto_MdBook_encoder_t* e, uint64_t val);

proto_MdBook_bids_encoder_t* proto_MdBook_add_bids(proto_MdBook_encoder_t* e, uint16_t num);

proto_MdBook_bids_encoder_t* proto_MdBook_bids_encode_next(proto_MdBook_bids_encoder_t* e);

uint16_t proto_MdBook_bids_encode_get_idx(proto_MdBook_bids_encoder_t* e);

int32_t proto_MdBook_bids_set_level_price(proto_MdBook_bids_encoder_t* e, double val);

int32_t proto_MdBook_bids_set_level_qty(proto_MdBook_bids_encoder_t* e, double val);

proto_MdBook_asks_encoder_t* proto_MdBook_add_asks(proto_MdBook_encoder_t* e, uint16_t num);

proto_MdBook_asks_encoder_t* proto_MdBook_asks_encode_next(proto_MdBook_asks_encoder_t* e);

uint16_t proto_MdBook_asks_encode_get_idx(proto_MdBook_asks_encoder_t* e);

int32_t proto_MdBook_asks_set_level_price(proto_MdBook_asks_encoder_t* e, double val);

int32_t proto_MdBook_asks_set_level_qty(proto_MdBook_asks_encoder_t* e, double val);

// MdStatistic encoder
int32_t proto_MdStatistic_get_size(proto_MdStatistic_encoder_t* e);

int32_t proto_MdStatistic_set_instr_id(proto_MdStatistic_encoder_t* e, uint64_t val);

int32_t proto_MdStatistic_set_exch_ts(proto_MdStatistic_encoder_t* e, uint64_t val);

int32_t proto_MdStatistic_set_local_ts(proto_MdStatistic_encoder_t* e, uint64_t val);

int32_t proto_MdStatistic_set_field_id(proto_MdStatistic_encoder_t* e, proto_FieldId_t val);

int32_t proto_MdStatistic_set_field_val(proto_MdStatistic_encoder_t* e, double val);

// AccPosSubscribe encoder
int32_t proto_AccPosSubscribe_get_size(proto_AccPosSubscribe_encoder_t* e);

int32_t proto_AccPosSubscribe_set_req_id(proto_AccPosSubscribe_encoder_t* e, uint32_t val);

int32_t proto_AccPosSubscribe_set_action(proto_AccPosSubscribe_encoder_t* e, proto_SubsActionType_t val);

// AccPosUnsubscribe encoder
int32_t proto_AccPosUnsubscribe_get_size(proto_AccPosUnsubscribe_encoder_t* e);

int32_t proto_AccPosUnsubscribe_set_req_id(proto_AccPosUnsubscribe_encoder_t* e, uint32_t val);

// AccPosSubscriptionResult encoder
int32_t proto_AccPosSubscriptionResult_get_size(proto_AccPosSubscriptionResult_encoder_t* e);

int32_t proto_AccPosSubscriptionResult_set_req_id(proto_AccPosSubscriptionResult_encoder_t* e, uint32_t val);

int32_t proto_AccPosSubscriptionResult_set_result(proto_AccPosSubscriptionResult_encoder_t* e, proto_SubsResult_t val);

// AccBalanceSubscribe encoder
int32_t proto_AccBalanceSubscribe_get_size(proto_AccBalanceSubscribe_encoder_t* e);

int32_t proto_AccBalanceSubscribe_set_req_id(proto_AccBalanceSubscribe_encoder_t* e, uint32_t val);

int32_t proto_AccBalanceSubscribe_set_action(proto_AccBalanceSubscribe_encoder_t* e, proto_SubsActionType_t val);

// AccBalanceUnsubscribe encoder
int32_t proto_AccBalanceUnsubscribe_get_size(proto_AccBalanceUnsubscribe_encoder_t* e);

int32_t proto_AccBalanceUnsubscribe_set_req_id(proto_AccBalanceUnsubscribe_encoder_t* e, uint32_t val);

// AccBalanceSubscriptionResult encoder
int32_t proto_AccBalanceSubscriptionResult_get_size(proto_AccBalanceSubscriptionResult_encoder_t* e);

int32_t proto_AccBalanceSubscriptionResult_set_req_id(proto_AccBalanceSubscriptionResult_encoder_t* e, uint32_t val);

int32_t proto_AccBalanceSubscriptionResult_set_result(proto_AccBalanceSubscriptionResult_encoder_t* e, proto_SubsResult_t val);

// AccPosition encoder
int32_t proto_AccPosition_get_size(proto_AccPosition_encoder_t* e);

proto_AccPosition_Position_encoder_t* proto_AccPosition_add_Position(proto_AccPosition_encoder_t* e, uint16_t num);

proto_AccPosition_Position_encoder_t* proto_AccPosition_Position_encode_next(proto_AccPosition_Position_encoder_t* e);

uint16_t proto_AccPosition_Position_encode_get_idx(proto_AccPosition_Position_encoder_t* e);

int32_t proto_AccPosition_Position_set_exch(proto_AccPosition_Position_encoder_t* e, proto_Exchange_t val);

int32_t proto_AccPosition_Position_set_account(proto_AccPosition_Position_encoder_t* e, xroad_str_t val);

int32_t proto_AccPosition_Position_set_exch_account(proto_AccPosition_Position_encoder_t* e, xroad_str_t val);

int32_t proto_AccPosition_Position_set_instr_name(proto_AccPosition_Position_encoder_t* e, xroad_str_t val);

int32_t proto_AccPosition_Position_set_realized_pnl(proto_AccPosition_Position_encoder_t* e, double val);

int32_t proto_AccPosition_Position_set_change_pnl(proto_AccPosition_Position_encoder_t* e, double val);

int32_t proto_AccPosition_Position_set_unrealized_pnl(proto_AccPosition_Position_encoder_t* e, double val);

int32_t proto_AccPosition_Position_set_position(proto_AccPosition_Position_encoder_t* e, double val);

int32_t proto_AccPosition_Position_set_cost(proto_AccPosition_Position_encoder_t* e, double val);

int32_t proto_AccPosition_Position_set_currency(proto_AccPosition_Position_encoder_t* e, xroad_str_t val);

// AccBalance encoder
int32_t proto_AccBalance_get_size(proto_AccBalance_encoder_t* e);

proto_AccBalance_Balance_encoder_t* proto_AccBalance_add_Balance(proto_AccBalance_encoder_t* e, uint16_t num);

proto_AccBalance_Balance_encoder_t* proto_AccBalance_Balance_encode_next(proto_AccBalance_Balance_encoder_t* e);

uint16_t proto_AccBalance_Balance_encode_get_idx(proto_AccBalance_Balance_encoder_t* e);

int32_t proto_AccBalance_Balance_set_exch(proto_AccBalance_Balance_encoder_t* e, proto_Exchange_t val);

int32_t proto_AccBalance_Balance_set_account(proto_AccBalance_Balance_encoder_t* e, xroad_str_t val);

int32_t proto_AccBalance_Balance_set_exch_account(proto_AccBalance_Balance_encoder_t* e, xroad_str_t val);

int32_t proto_AccBalance_Balance_set_currency(proto_AccBalance_Balance_encoder_t* e, xroad_str_t val);

int32_t proto_AccBalance_Balance_set_available(proto_AccBalance_Balance_encoder_t* e, double val);

// NewOrderSingle encoder
int32_t proto_NewOrderSingle_get_size(proto_NewOrderSingle_encoder_t* e);

int32_t proto_NewOrderSingle_set_instr_id(proto_NewOrderSingle_encoder_t* e, uint64_t val);

int32_t proto_NewOrderSingle_set_clord_id(proto_NewOrderSingle_encoder_t* e, int64_t val);

int32_t proto_NewOrderSingle_set_price(proto_NewOrderSingle_encoder_t* e, double val);

int32_t proto_NewOrderSingle_set_qty(proto_NewOrderSingle_encoder_t* e, double val);

int32_t proto_NewOrderSingle_set_side(proto_NewOrderSingle_encoder_t* e, proto_Side_t val);

int32_t proto_NewOrderSingle_set_time_in_force(proto_NewOrderSingle_encoder_t* e, proto_TimeInForce_t val);

int32_t proto_NewOrderSingle_set_ord_type(proto_NewOrderSingle_encoder_t* e, proto_OrdType_t val);

int32_t proto_NewOrderSingle_set_account(proto_NewOrderSingle_encoder_t* e, xroad_str_t val);

int32_t proto_NewOrderSingle_set_client_code(proto_NewOrderSingle_encoder_t* e, xroad_str_t val);

int32_t proto_NewOrderSingle_set_algo_type(proto_NewOrderSingle_encoder_t* e, proto_AlgoType_t val);

int32_t proto_NewOrderSingle_set_algo_start(proto_NewOrderSingle_encoder_t* e, uint32_t val);

void proto_NewOrderSingle_reset_algo_start(proto_NewOrderSingle_encoder_t* e);

int32_t proto_NewOrderSingle_set_algo_stop(proto_NewOrderSingle_encoder_t* e, uint32_t val);

void proto_NewOrderSingle_reset_algo_stop(proto_NewOrderSingle_encoder_t* e);

int32_t proto_NewOrderSingle_set_algo_aggr_level(proto_NewOrderSingle_encoder_t* e, uint8_t val);

void proto_NewOrderSingle_reset_algo_aggr_level(proto_NewOrderSingle_encoder_t* e);

int32_t proto_NewOrderSingle_set_algo_mid_time(proto_NewOrderSingle_encoder_t* e, uint8_t val);

void proto_NewOrderSingle_reset_algo_mid_time(proto_NewOrderSingle_encoder_t* e);

int32_t proto_NewOrderSingle_set_algo_aggr_time(proto_NewOrderSingle_encoder_t* e, uint8_t val);

void proto_NewOrderSingle_reset_algo_aggr_time(proto_NewOrderSingle_encoder_t* e);

int32_t proto_NewOrderSingle_set_algo_price_move(proto_NewOrderSingle_encoder_t* e, float val);

void proto_NewOrderSingle_reset_algo_price_move(proto_NewOrderSingle_encoder_t* e);

int32_t proto_NewOrderSingle_set_algo_working_int(proto_NewOrderSingle_encoder_t* e, uint32_t val);

void proto_NewOrderSingle_reset_algo_working_int(proto_NewOrderSingle_encoder_t* e);

int32_t proto_NewOrderSingle_set_algo_book_depth(proto_NewOrderSingle_encoder_t* e, uint32_t val);

void proto_NewOrderSingle_reset_algo_book_depth(proto_NewOrderSingle_encoder_t* e);

int32_t proto_NewOrderSingle_set_algo_level_dist(proto_NewOrderSingle_encoder_t* e, uint32_t val);

void proto_NewOrderSingle_reset_algo_level_dist(proto_NewOrderSingle_encoder_t* e);

int32_t proto_NewOrderSingle_set_algo_display_qty(proto_NewOrderSingle_encoder_t* e, double val);

int32_t proto_NewOrderSingle_set_algo_sensitivity(proto_NewOrderSingle_encoder_t* e, uint32_t val);

void proto_NewOrderSingle_reset_algo_sensitivity(proto_NewOrderSingle_encoder_t* e);

int32_t proto_NewOrderSingle_set_algo_deviation(proto_NewOrderSingle_encoder_t* e, uint32_t val);

void proto_NewOrderSingle_reset_algo_deviation(proto_NewOrderSingle_encoder_t* e);

int32_t proto_NewOrderSingle_set_algo_threshold(proto_NewOrderSingle_encoder_t* e, double val);

// OrderAccepted encoder
int32_t proto_OrderAccepted_get_size(proto_OrderAccepted_encoder_t* e);

int32_t proto_OrderAccepted_set_clord_id(proto_OrderAccepted_encoder_t* e, int64_t val);

int32_t proto_OrderAccepted_set_exch_id(proto_OrderAccepted_encoder_t* e, uint64_t val);

void proto_OrderAccepted_reset_exch_id(proto_OrderAccepted_encoder_t* e);

int32_t proto_OrderAccepted_set_ts(proto_OrderAccepted_encoder_t* e, uint64_t val);

// OrderRejected encoder
int32_t proto_OrderRejected_get_size(proto_OrderRejected_encoder_t* e);

int32_t proto_OrderRejected_set_clord_id(proto_OrderRejected_encoder_t* e, int64_t val);

int32_t proto_OrderRejected_set_ts(proto_OrderRejected_encoder_t* e, uint64_t val);

int32_t proto_OrderRejected_set_ord_rej_reason(proto_OrderRejected_encoder_t* e, proto_OrdRejReason_t val);

int32_t proto_OrderRejected_set_text_length(proto_OrderRejected_encoder_t* e, uint32_t val);

int32_t proto_OrderRejected_set_text_varData(proto_OrderRejected_encoder_t* e, uint8_t val);

// CancelOrder encoder
int32_t proto_CancelOrder_get_size(proto_CancelOrder_encoder_t* e);

int32_t proto_CancelOrder_set_clord_id(proto_CancelOrder_encoder_t* e, int64_t val);

// CancelOrderRejected encoder
int32_t proto_CancelOrderRejected_get_size(proto_CancelOrderRejected_encoder_t* e);

int32_t proto_CancelOrderRejected_set_clord_id(proto_CancelOrderRejected_encoder_t* e, int64_t val);

int32_t proto_CancelOrderRejected_set_ts(proto_CancelOrderRejected_encoder_t* e, uint64_t val);

int32_t proto_CancelOrderRejected_set_rej_reason(proto_CancelOrderRejected_encoder_t* e, proto_OrdRejReason_t val);

int32_t proto_CancelOrderRejected_set_text_length(proto_CancelOrderRejected_encoder_t* e, uint32_t val);

int32_t proto_CancelOrderRejected_set_text_varData(proto_CancelOrderRejected_encoder_t* e, uint8_t val);

// OrderCanceled encoder
int32_t proto_OrderCanceled_get_size(proto_OrderCanceled_encoder_t* e);

int32_t proto_OrderCanceled_set_clord_id(proto_OrderCanceled_encoder_t* e, int64_t val);

int32_t proto_OrderCanceled_set_ts(proto_OrderCanceled_encoder_t* e, uint64_t val);

// ReplaceOrder encoder
int32_t proto_ReplaceOrder_get_size(proto_ReplaceOrder_encoder_t* e);

int32_t proto_ReplaceOrder_set_clord_id(proto_ReplaceOrder_encoder_t* e, int64_t val);

int32_t proto_ReplaceOrder_set_price(proto_ReplaceOrder_encoder_t* e, double val);

int32_t proto_ReplaceOrder_set_qty(proto_ReplaceOrder_encoder_t* e, double val);

int32_t proto_ReplaceOrder_set_algo_start(proto_ReplaceOrder_encoder_t* e, uint32_t val);

void proto_ReplaceOrder_reset_algo_start(proto_ReplaceOrder_encoder_t* e);

int32_t proto_ReplaceOrder_set_algo_stop(proto_ReplaceOrder_encoder_t* e, uint32_t val);

void proto_ReplaceOrder_reset_algo_stop(proto_ReplaceOrder_encoder_t* e);

int32_t proto_ReplaceOrder_set_algo_aggr_level(proto_ReplaceOrder_encoder_t* e, uint8_t val);

void proto_ReplaceOrder_reset_algo_aggr_level(proto_ReplaceOrder_encoder_t* e);

int32_t proto_ReplaceOrder_set_algo_mid_time(proto_ReplaceOrder_encoder_t* e, uint8_t val);

void proto_ReplaceOrder_reset_algo_mid_time(proto_ReplaceOrder_encoder_t* e);

int32_t proto_ReplaceOrder_set_algo_aggr_time(proto_ReplaceOrder_encoder_t* e, uint8_t val);

void proto_ReplaceOrder_reset_algo_aggr_time(proto_ReplaceOrder_encoder_t* e);

int32_t proto_ReplaceOrder_set_algo_price_move(proto_ReplaceOrder_encoder_t* e, float val);

void proto_ReplaceOrder_reset_algo_price_move(proto_ReplaceOrder_encoder_t* e);

int32_t proto_ReplaceOrder_set_algo_working_int(proto_ReplaceOrder_encoder_t* e, uint32_t val);

void proto_ReplaceOrder_reset_algo_working_int(proto_ReplaceOrder_encoder_t* e);

int32_t proto_ReplaceOrder_set_algo_book_depth(proto_ReplaceOrder_encoder_t* e, uint32_t val);

void proto_ReplaceOrder_reset_algo_book_depth(proto_ReplaceOrder_encoder_t* e);

int32_t proto_ReplaceOrder_set_algo_level_dist(proto_ReplaceOrder_encoder_t* e, uint32_t val);

void proto_ReplaceOrder_reset_algo_level_dist(proto_ReplaceOrder_encoder_t* e);

int32_t proto_ReplaceOrder_set_algo_display_qty(proto_ReplaceOrder_encoder_t* e, double val);

int32_t proto_ReplaceOrder_set_algo_sensitivity(proto_ReplaceOrder_encoder_t* e, uint32_t val);

void proto_ReplaceOrder_reset_algo_sensitivity(proto_ReplaceOrder_encoder_t* e);

int32_t proto_ReplaceOrder_set_algo_deviation(proto_ReplaceOrder_encoder_t* e, uint32_t val);

void proto_ReplaceOrder_reset_algo_deviation(proto_ReplaceOrder_encoder_t* e);

int32_t proto_ReplaceOrder_set_algo_threshold(proto_ReplaceOrder_encoder_t* e, double val);

// ReplaceOrderRejected encoder
int32_t proto_ReplaceOrderRejected_get_size(proto_ReplaceOrderRejected_encoder_t* e);

int32_t proto_ReplaceOrderRejected_set_clord_id(proto_ReplaceOrderRejected_encoder_t* e, int64_t val);

int32_t proto_ReplaceOrderRejected_set_ts(proto_ReplaceOrderRejected_encoder_t* e, uint64_t val);

int32_t proto_ReplaceOrderRejected_set_rej_reason(proto_ReplaceOrderRejected_encoder_t* e, proto_OrdRejReason_t val);

int32_t proto_ReplaceOrderRejected_set_text_length(proto_ReplaceOrderRejected_encoder_t* e, uint32_t val);

int32_t proto_ReplaceOrderRejected_set_text_varData(proto_ReplaceOrderRejected_encoder_t* e, uint8_t val);

// OrderReplaced encoder
int32_t proto_OrderReplaced_get_size(proto_OrderReplaced_encoder_t* e);

int32_t proto_OrderReplaced_set_clord_id(proto_OrderReplaced_encoder_t* e, int64_t val);

int32_t proto_OrderReplaced_set_ts(proto_OrderReplaced_encoder_t* e, uint64_t val);

int32_t proto_OrderReplaced_set_price(proto_OrderReplaced_encoder_t* e, double val);

int32_t proto_OrderReplaced_set_qty(proto_OrderReplaced_encoder_t* e, double val);

// Trade encoder
int32_t proto_Trade_get_size(proto_Trade_encoder_t* e);

int32_t proto_Trade_set_clord_id(proto_Trade_encoder_t* e, int64_t val);

int32_t proto_Trade_set_exch_id(proto_Trade_encoder_t* e, uint64_t val);

void proto_Trade_reset_exch_id(proto_Trade_encoder_t* e);

int32_t proto_Trade_set_ts(proto_Trade_encoder_t* e, uint64_t val);

int32_t proto_Trade_set_price(proto_Trade_encoder_t* e, double val);

int32_t proto_Trade_set_qty(proto_Trade_encoder_t* e, double val);

int32_t proto_Trade_set_leaves_qty(proto_Trade_encoder_t* e, double val);

int32_t proto_Trade_set_cum_qty(proto_Trade_encoder_t* e, double val);

// OrderExpired encoder
int32_t proto_OrderExpired_get_size(proto_OrderExpired_encoder_t* e);

int32_t proto_OrderExpired_set_clord_id(proto_OrderExpired_encoder_t* e, int64_t val);

int32_t proto_OrderExpired_set_ts(proto_OrderExpired_encoder_t* e, uint64_t val);

// TrdCaptReport encoder
int32_t proto_TrdCaptReport_get_size(proto_TrdCaptReport_encoder_t* e);

int32_t proto_TrdCaptReport_set_tradeno(proto_TrdCaptReport_encoder_t* e, int64_t val);

int32_t proto_TrdCaptReport_set_orderno(proto_TrdCaptReport_encoder_t* e, uint64_t val);

void proto_TrdCaptReport_reset_orderno(proto_TrdCaptReport_encoder_t* e);

int32_t proto_TrdCaptReport_set_instr_name(proto_TrdCaptReport_encoder_t* e, xroad_str_t val);

int32_t proto_TrdCaptReport_set_account(proto_TrdCaptReport_encoder_t* e, xroad_str_t val);

int32_t proto_TrdCaptReport_set_client_code(proto_TrdCaptReport_encoder_t* e, xroad_str_t val);

int32_t proto_TrdCaptReport_set_ts(proto_TrdCaptReport_encoder_t* e, uint64_t val);

int32_t proto_TrdCaptReport_set_price(proto_TrdCaptReport_encoder_t* e, double val);

int32_t proto_TrdCaptReport_set_qty(proto_TrdCaptReport_encoder_t* e, double val);

int32_t proto_TrdCaptReport_set_fee(proto_TrdCaptReport_encoder_t* e, double val);

int32_t proto_TrdCaptReport_set_side(proto_TrdCaptReport_encoder_t* e, proto_Side_t val);

// Ping encoder
int32_t proto_Ping_get_size(proto_Ping_encoder_t* e);

int32_t proto_Ping_set_req_id(proto_Ping_encoder_t* e, uint32_t val);

int32_t proto_Ping_set_ts(proto_Ping_encoder_t* e, uint64_t val);

// Pong encoder
int32_t proto_Pong_get_size(proto_Pong_encoder_t* e);

int32_t proto_Pong_set_req_id(proto_Pong_encoder_t* e, uint32_t val);

int32_t proto_Pong_set_ts(proto_Pong_encoder_t* e, uint64_t val);

// SystemState encoder
int32_t proto_SystemState_get_size(proto_SystemState_encoder_t* e);

int32_t proto_SystemState_set_state(proto_SystemState_encoder_t* e, proto_State_t val);

int32_t proto_SystemState_set_ts(proto_SystemState_encoder_t* e, uint64_t val);

// Heartbeat encoder
int32_t proto_Heartbeat_get_size(proto_Heartbeat_encoder_t* e);

int32_t proto_Heartbeat_set_ts(proto_Heartbeat_encoder_t* e, uint64_t val);


// decoding

#ifdef __cplusplus
}
#endif