
/**
  * @brief CAUTION: do not change this file - it is autogenerated.
  */

#pragma once

#include <common/xroad_string.h>
#include <stdint.h>
#include <stdbool.h>
#include <string.h>

#ifdef __cplusplus
extern "C"
{
#endif

typedef enum
{
   car_log_level_error  = 1,
   car_log_level_warn   = 2,
   car_log_level_notice = 4,
   car_log_level_info   = 8,
   car_log_level_debug  = 16,
   car_log_level_trace  = 32
} car_log_level_t;

typedef void (*car_logger_cback_t)(car_log_level_t, const char*);

typedef enum
{
   car_template_car = 1,
} car_templates_t;

{
// encoding types

typedef struct car_default_encoder_s car_car_encoder_t;

// encoder

void* car_create_encoder(car_templates_t tid, char* data, size_t len, car_logger_cback_t cback);

void car_destroy_encoder(void* e);

// car encoder
int32_t car_car_get_size(car_car_encoder_t* e);

int32_t car_car_set_id(car_car_encoder_t* e, int32_t val);

int32_t car_car_set_name(car_car_encoder_t* e, xroad_str_t val);


// decoding

#ifdef __cplusplus
}
#endif