{% macro create_group_decoders(prefix, fields) %}
{%     for f in fields if f.type.type == "group" %}
   {{package}}_group_decoder_t {{prefix}}_{{f.name}}_grp_decoder;
{{create_group_decoders(prefix+"_"+f.name, f.fields)-}}
{%     endfor %}
{% endmacro -%}


{% macro create_group_structs(prefix, fields) %}
{%     for g in fields if g.type.type == "group" %}
#pragma pack(push)
#pragma pack(1)
typedef struct
{
{%         for f in g.fields %}
{%         if f.type.type == "simple" %}
{%            if f.type.length == 0 %}
   {{f.type|c_type}} {{f.name}}[];
{%            elif f.type.length > 1 %}
   {{f.type|c_type}} {{f.name}}[{{f.type.length}}];
{%            else %}
   {{f.type|c_type}} {{f.name}};
{%            endif %}
{%         elif f.type.type == "enum" %}
   {{package}}_{{f.type.name}}_t {{f.name}};
{%         elif f.type.type == "composite" %}
   {{f.type|c_type}}_t {{f.name}};
{%         endif %}
{% endfor %}
} {{prefix}}_{{g.name}}_t;
#pragma pack(pop)

{{create_group_structs(prefix+"_"+g.name, g.fields)-}}
{%     endfor %}
{% endmacro -%}


{% macro typedef_group_decoders(prefix, fields) %}
{%     for f in fields if f.type.type == "group" %}
typedef {{package}}_group_decoder_t {{prefix}}_{{f.name}}_decoder_t;

{{           typedef_group_decoders(prefix+"_"+f.name, f.fields)-}}
{%     endfor %}
{% endmacro -%}


#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <unistd.h>
#include "utils.h"


typedef enum
{
{% for m in messages %}
   {{package}}_template_{{m.name}} = {{m.id}},
{% endfor %}
} {{package}}_templates_t;


#pragma pack(push)
#pragma pack(1)
typedef struct
{
   uint16_t blockLength;
   uint16_t template_id;
   uint16_t schema_id;
   uint16_t version;
} message_header_t;
#pragma pack(pop)


#pragma pack(push)
#pragma pack(1)
typedef struct
{
   uint16_t blockLength;
   uint16_t numInGroup;
} group_size_encoding_t;
#pragma pack(pop)


typedef struct
{
   char* data;
   size_t len;
   char* objp;
   size_t offset;
   size_t var_offset;
} base_decoder_t;


typedef struct
{
   void* decoder;
   char* dimp;
   char* objp;
   size_t offset;
   size_t idx;
} {{package}}_group_decoder_t;


{% for m in messages if m|has_groups %}
typedef struct
{
   base_decoder_t base;
{{create_group_decoders(m.name, m.fields)-}}
} {{package}}_{{m.name}}_decoder_t;
{% endfor %}


{% for m in messages %}
{{-typedef_group_decoders(package+"_"+m.name, m.fields)-}}
{% endfor -%}


// types

{% for t in types if t.type == "composite" %}
#pragma pack(push)
#pragma pack(1)
typedef struct
{
{%     for t in t.types %}
{%         if t.type == "simple" %}
{%             if t.length == 0 %}
   {{t|c_type}} {{t.name}}[];
{%             elif t.length > 1 %}
   {{t|c_type}} {{t.name}}[{{t.length}}];
{%             else %}
   {{t|c_type}} {{t.name}};
{%             endif %}
{%         endif %}
{%     endfor %}
} {{t.name}}Type_t;
#pragma pack(pop)


{% endfor -%}


// groups

{% for m in messages %}
{{create_group_structs(m.name, m.fields)-}}

{% endfor -%}


// messages

{% for m in messages %}
#pragma pack(push)
#pragma pack(1)
typedef struct
{
{% for f in m.fields %}
{%    if f.type.type == "simple" %}
{%        if f.type.length == 0 %}
   {{f.type|c_type}} {{f.name}}[];
{%        elif f.type.length > 1 %}
   {{f.type|c_type}} {{f.name}}[{{f.type.length}}];
{%        else %}
   {{f.type|c_type}} {{f.name}};
{%        endif %}
{%    elif f.type.type == "enum" %}
   {{package}}_{{f.type.name}}_t {{f.name}};
{%    elif f.type.type == "composite" %}
   {{f.type|c_type}}_t {{f.name}};
{%    endif %}
{% endfor %}
} {{m.name}}_t;
#pragma pack(pop)


{% endfor -%}


{% macro render_fields(m, e, prefix, is_grp) -%}
{%    for f in e.fields %}
{%        if f.type.type in ["simple", "enum"] %}
//--------------------------------------------------------------------------------------------------------------------//
{%            if f.type.type == "simple"  %}
{{f.type|c_type_decl}} {{package}}_{{prefix}}_get_{{f.name}}({{package}}_{{prefix}}_decoder_t* d)
{%            elif f.type.type == "enum"  %}
{{package}}_{{f.type.name}}_t {{package}}_{{prefix}}_get_{{f.name}}({{package}}_{{prefix}}_decoder_t* d)
{%            endif  %}
{
{%            if is_grp == false %}
   base_decoder_t* base = &d->base;
   {{e.name}}_t* obj = ({{e.name}}_t*)base->objp;
{%            else %}
   {{prefix}}_t* obj = ({{prefix}}_t*)d->objp;
{%            endif %}
{%            if f.type.length > 1 and f.type.primitive_type == "char" %}
   return xroad_str_len(obj->{{f.name}}, strnlen(obj->{{f.name}}, {{f.type.length}}));
{%            else %}
   return obj->{{f.name}};
{%            endif %}
}

{%            if f.type.presence == "optional" %}
//--------------------------------------------------------------------------------------------------------------------//
bool {{package}}_{{prefix}}_{{f.name}}_is_null({{package}}_{{prefix}}_decoder_t* d)
{
{%                if is_grp == false %}
   decoder_t* base = &d->base;
   {{e.name}}_t* obj = ({{e.name}}_t*)(base->data + base->var_offset + sizeof(message_header_t));
{%                else %}
   decoder_t* base = (decoder_t*)d->decoder;
   group_size_encoding_t* grp_dim = (group_size_encoding_t*)d->data;
   {{prefix}}_t* obj = ({{prefix}}_t*)(d->data + sizeof(group_size_encoding_t) +
                                       base->var_offset - (grp_dim->numInGroup - d->idx) * 16);
{%                endif %}
{%                if f.type.length > 1 and f.type.primitive_type == "char" %}
   return !strncmp(obj->{{f.name}}, "{{f.type.null_value}}", {{f.type.length}});
{%                elif f.type.primitive_type in ["double", "float"] and f.type.null_value == "nan" %}
   return isnan(obj->{{f.name}});
{%                else %}
   return obj->{{f.name}} == {{f.type.null_value}};
{%                endif %}
}

{%            endif %}
{%        elif f.type.type == "data" and f.type.name == "varString" %}
//--------------------------------------------------------------------------------------------------------------------//
{{f.type|c_type_decl}} {{package}}_{{prefix}}_get_{{f.name}}({{package}}_{{prefix}}_decoder_t* d)
{
{%                if is_grp == false %}
   decoder_t* base = &d->base;
   var_string_t* obj = (var_string_t*)(base->data + base->var_offset + sizeof(message_header_t) + {{f.offset}});
{%                else %}
   decoder_t* base = (decoder_t*)d->decoder;
   group_size_encoding_t* grp_dim = (group_size_encoding_t*)d->data;
   var_string_t* obj = ({{prefix}}_t*)(d->data + sizeof(group_size_encoding_t) +
                              base->var_offset - (grp_dim->numInGroup - d->idx) * 16) + {{f.offset}};
{%                endif %}
   return xroad_str_len(obj->data, obj->length);
}

{%        elif f.type.type == "composite" %}
{%            for t in f.type.types %}
//--------------------------------------------------------------------------------------------------------------------//
{{t|c_type_decl}} {{package}}_{{prefix}}_get_{{f.name}}_{{t.name}}({{package}}_{{prefix}}_decoder_t* d)
{
{%                if is_grp == false %}
   decoder_t* base = &d->base;
   {{e.name}}_t* obj = ({{e.name}}_t*)(base->data + sizeof(message_header_t));
{%                else %}
   decoder_t* base = (decoder_t*)d->decoder;
   group_size_encoding_t* grp_dim = (group_size_encoding_t*)d->data;
   {{prefix}}_t* obj = ({{prefix}}_t*)(d->data + sizeof(group_size_encoding_t) +
                              base->var_offset - (grp_dim->numInGroup - d->idx) * 16) + {{f.offset}};
{%                endif %}
{%                if t.length > 1 and t.primitive_type == "char" %}
   if (val.len > {{t.length}} && base->cback)
   {
      (base->cback)({{package}}_log_level_warn, "data is too long for {{e.name}}_{{f.name}}_{{t.name}} field and will be truncated");
   }
   return xroad_str_len(obj->{{f.name}}, strnlen(obj->{{f.name}}, {{f.type.length}}));
{%                else %}
   return obj->{{f.name}}.{{t.name}};
{%                endif %}
}

{%            endfor %}
{%        elif f.type.type == "group" %}
{%            if f.dimensionType == "groupSizeEncoding" %}
{%                set grp_dimension_type = "group_size_encoding_t" %}
{%            else %}
{%                set grp_dimension_type = f.dimensionType + "Type_t" %}
{%            endif %}

//--------------------------------------------------------------------------------------------------------------------//
{{package}}_{{prefix}}_{{f.name}}_decoder_t* {{package}}_{{prefix}}_get_{{f.name}}({{package}}_{{prefix}}_decoder_t* d)
{
{%                if is_grp == false %}
   {{package}}_{{m.name}}_decoder_t* decoder = d;
{%                else %}
   {{package}}_{{m.name}}_decoder_t* decoder = ({{package}}_{{m.name}}_decoder_t*)d->decoder;
{%                endif %}

   decoder->{{prefix}}_{{f.name}}_grp_decoder.idx = -1;
   decoder->{{prefix}}_{{f.name}}_grp_decoder.decoder = decoder;
   decoder->{{prefix}}_{{f.name}}_grp_decoder.dimp = decoder->base.data + decoder->base.var_offset;
   decoder->base.var_offset += sizeof({{grp_dimension_type}});
   return &decoder->{{prefix}}_{{f.name}}_grp_decoder;
}

//--------------------------------------------------------------------------------------------------------------------//
uint16_t {{package}}_{{prefix}}_{{f.name}}_decode_get_idx({{package}}_{{prefix}}_{{f.name}}_decoder_t* d)
{
   return d->idx;
}

//--------------------------------------------------------------------------------------------------------------------//
size_t {{package}}_{{prefix}}_{{f.name}}_decode_get_count({{package}}_{{prefix}}_{{f.name}}_decoder_t* d)
{
   {{grp_dimension_type}}* dim = ({{grp_dimension_type}}*)d->dimp;
   return (size_t)dim->numInGroup;
}

//--------------------------------------------------------------------------------------------------------------------//
{{package}}_{{prefix}}_{{f.name}}_decoder_t* {{package}}_{{prefix}}_{{f.name}}_decode_next({{package}}_{{prefix}}_{{f.name}}_decoder_t* d)
{
   {{package}}_{{m.name}}_decoder_t* decoder = ({{package}}_{{m.name}}_decoder_t*)d->decoder;
   {{grp_dimension_type}}* dim = ({{grp_dimension_type}}*)d->dimp;

   ++d->idx;
   printf("\n%s: idx=%d, numInGroup=%d, offset=%d, dimp=%p, objp=%p\n", __func__, (int)d->idx, (int)dim->numInGroup, (int)d->offset, d->dimp, d->objp);
   if (d->idx < dim->numInGroup)
   {
      d->offset = decoder->base.var_offset;
      d->objp = decoder->base.data + d->offset;
      decoder->base.var_offset += dim->blockLength;
      return d;
   }
   --d->idx;
   return NULL;
}

{{            render_fields(m, f, prefix+"_"+f.name, true)-}}
{%        endif %}
{%    endfor %}
{% endmacro -%}

//--------------------------------------------------------------------------------------------------------------------//
void* {{package}}_decoder_create(char* data, size_t len)
{
   message_header_t* hdr = (message_header_t*)data;
   switch(hdr->template_id)
   {
{% for m in messages %}
      case {{package}}_template_{{m.name}}:
      {
         {{package}}_{{m.name}}_decoder_t* decoder = calloc(1, sizeof({{package}}_{{m.name}}_decoder_t));
         decoder->base.data = data;
         decoder->base.len = len;
         decoder->base.offset = sizeof(message_header_t);
         decoder->base.objp = data + decoder->base.offset;
         decoder->base.var_offset = decoder->base.offset + hdr->blockLength;
         return decoder;
      }
{% endfor %}
   }
   return NULL;
}

//--------------------------------------------------------------------------------------------------------------------//
void {{package}}_decoder_destroy(void* decoder)
{
   free(decoder);
}

{% for m in messages %}
{{render_fields(m, m, m.name, false)-}}
{% endfor %}

// Testing

int main(int argc, char *argv[])
{
   char data[512];

   FILE* fp;
   size_t len = 0;
   if ((fp = fopen("/tmp/c_encoder_lab.bin", "rb")))
   {
      len = fread(data, 1, sizeof(data), fp);
      fclose(fp);
   }
   printf("Read encoded data with length: %lu\n", len);
   DumpHex(data, len);
   printf("\n");

   car_car_decoder_t* car;
   car_car_performance_decoder_t* performance;
   car_car_performance_acceleration_decoder_t* acceleration;

   car = car_decoder_create(data, sizeof(data));

   printf("car.code=0x%08X\n", car_car_get_code(car));

   performance = car_car_get_performance(car);
   printf("car.performance.count=%lu\n", car_car_performance_decode_get_count(performance));

   while ((performance = car_car_performance_decode_next(performance)))
   {
      printf("car.performance.idx=%d\n", (int)car_car_performance_decode_get_idx(performance));
      printf("car.performance.octaneRating=0x%08X\n", car_car_performance_get_octaneRating(performance));

      acceleration = car_car_performance_get_acceleration(performance);
      printf("car.performance.acceleration.count=%lu\n", car_car_performance_acceleration_decode_get_count(acceleration));
      while ((acceleration = car_car_performance_acceleration_decode_next(acceleration)))
      {
         printf("car.performance.acceleration.idx=%d\n", car_car_performance_decode_get_idx(acceleration));
         printf("car.performance.acceleration.mph=0x%04X\n", car_car_performance_acceleration_get_mph(acceleration));
         printf("car.performance.acceleration.seconds=0x%08X\n", car_car_performance_acceleration_get_seconds(acceleration));
      }
   }

   printf("Decoded length: %lu\n\n", len);

   car_decoder_destroy(car);
   return 0;
}
