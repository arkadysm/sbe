{% macro create_group_decoders(prefix, fields) %}
{%     for f in fields if f.type.type == "group" %}
   {{package}}_group_decoder_t {{prefix}}_{{f.name}}_grp_decoder;
{{create_group_decoders(prefix+"_"+f.name, f.fields)-}}
{%     endfor %}
{% endmacro -%}

{% macro create_group_structs(prefix, fields) %}
{%     for g in fields if g.type.type == "group" %}
typedef struct
{
{%         for f in g.fields %}
{%         if f.type.type == "simple" %}
{%            if f.type.length > 1 %}
   {{f.type|c_type}} {{f.name}}[{{f.type.length}}];
{%            else %}
   {{f.type|c_type}} {{f.name}};
{%            endif %}
{%         elif f.type.type == "enum" %}
   {{package}}_{{f.type.name}}_t {{f.name}};
{%         elif f.type.type == "composite" %}
   {{f.type|c_type}}_t {{f.name}};
{%         endif %}
{% endfor %}
} {{prefix}}_{{g.name}}_t;

{{create_group_structs(prefix+"_"+g.name, g.fields)-}}
{%     endfor %}
{% endmacro -%}
/**
  * @brief CAUTION: do not change this file - it is autogenerated.
  */

#include "{{env.header}}"
#include <common/xroad_aux.h>
#include <math.h>

typedef struct
{
   uint16_t block_length;
   uint16_t template_id;
   uint16_t schema_id;
   uint16_t version;
} message_header_t;

typedef struct
{
   uint16_t block_length;
   uint16_t num_in_group;
} group_size_encoding_t;

typedef struct
{
   char* data;
   size_t len;
   {{package}}_logger_cback_t cback;
   size_t var_offset;
} decoder_t;

struct {{package}}_group_decoder_s
{
   void* decoder;
   uint16_t idx;
   char* data;
};

typedef struct {{package}}_group_decoder_s {{package}}_group_decoder_t;

struct {{package}}_default_decoder_s
{
   decoder_t* base;
};

{% for m in messages if m|has_groups %}
struct {{package}}_{{m.name}}_decoder_s
{
   decoder_t base;
{{create_group_decoders(m.name, m.fields)-}}
};
{% endfor %}

// types

{% for t in types if t.type == "composite" %}
typedef struct
{
{%     for t in t.types %}
{%         if t.type == "simple" %}
{%             if t.length > 1 %}
   {{t|c_type}} {{t.name}}[{{t.length}}];
{%             else %}
   {{t|c_type}} {{t.name}};
{%             endif %}
{%         endif %}
{%     endfor %}
} {{t.name}}Type_t;

{% endfor -%}

// groups

{% for m in messages %}
{{create_group_structs(m.name, m.fields)-}}
{% endfor -%}

// messages

{% for m in messages %}
typedef struct
{
{% for f in m.fields %}
{%    if f.type.type == "simple" %}
   {%        if f.type.length > 1%}
   {{f.type|c_type}} {{f.name}}[{{f.type.length}}];
{%        else %}
   {{f.type|c_type}} {{f.name}};
{%        endif %}
{%    elif f.type.type == "enum" %}
   {{package}}_{{f.type.name}}_t {{f.name}};
{%    elif f.type.type == "composite" %}
   {{f.type|c_type}}_t {{f.name}};
{%    endif %}
{% endfor %}
} {{m.name}}_t;

{% endfor -%}

{% macro render_fields(m, e, prefix, is_grp) -%}
{%    for f in e.fields %}
{%        if f.type.type in ["simple", "enum"] %}
//--------------------------------------------------------------------------------------------------------------------//
{%            if f.type.type == "simple"  %}
{{f.type|c_type_decl}} {{package}}_{{prefix}}_get_{{f.name}}({{package}}_{{prefix}}_decoder_t* d)
{%            elif f.type.type == "enum"  %}
{{package}}_{{f.type.name}}_t {{package}}_{{prefix}}_get_{{f.name}}({{package}}_{{prefix}}_decoder_t* d)
{%            endif  %}
{
{%            if is_grp == false %}
   decoder_t* base = &d->base;
   {{e.name}}_t* obj = ({{e.name}}_t*)(base->data + base->var_offset + sizeof(message_header_t));
{%            else %}
   decoder_t* base = (decoder_t*)d->decoder;
   group_size_encoding_t* grp_dim = (group_size_encoding_t*)d->data;
   {{prefix}}_t* obj = ({{prefix}}_t*)(d->data + sizeof(group_size_encoding_t) +
                                       base->var_offset - (grp_dim->num_in_group - d->idx) * 16);
{%            endif %}
{%            if f.type.length > 1 and f.type.primitive_type == "char" %}
   return xroad_str_len(obj->{{f.name}}, strnlen(obj->{{f.name}}, {{f.type.length}}));
{%            else %}
   return obj->{{f.name}};
{%            endif %}
}

{%            if f.type.presence == "optional" %}
//--------------------------------------------------------------------------------------------------------------------//
bool {{package}}_{{prefix}}_{{f.name}}_is_null({{package}}_{{prefix}}_decoder_t* d)
{
{%                if is_grp == false %}
   decoder_t* base = &d->base;
   {{e.name}}_t* obj = ({{e.name}}_t*)(base->data + base->var_offset + sizeof(message_header_t));
{%                else %}
   decoder_t* base = (decoder_t*)d->decoder;
   group_size_encoding_t* grp_dim = (group_size_encoding_t*)d->data;
   {{prefix}}_t* obj = ({{prefix}}_t*)(d->data + sizeof(group_size_encoding_t) +
                                       base->var_offset - (grp_dim->num_in_group - d->idx) * 16);
{%                endif %}
{%                if f.type.length > 1 and f.type.primitive_type == "char" %}
   return !strncmp(obj->{{f.name}}, "{{f.type.null_value}}", {{f.type.length}});
{%                elif f.type.primitive_type in ["double", "float"] and f.type.null_value == "nan" %}
   return isnan(obj->{{f.name}});
{%                else %}
   return obj->{{f.name}} == {{f.type.null_value}};
{%                endif %}
}

{%            endif %}
{%        elif f.type.type == "data" and f.type.name == "varString" %}
//--------------------------------------------------------------------------------------------------------------------//
{{f.type|c_type_decl}} {{package}}_{{prefix}}_get_{{f.name}}({{package}}_{{prefix}}_decoder_t* d)
{
{%                if is_grp == false %}
   decoder_t* base = &d->base;
   var_string_t* obj = (var_string_t*)(base->data + base->var_offset + sizeof(message_header_t) + {{f.offset}});
{%                else %}
   decoder_t* base = (decoder_t*)d->decoder;
   group_size_encoding_t* grp_dim = (group_size_encoding_t*)d->data;
   var_string_t* obj = ({{prefix}}_t*)(d->data + sizeof(group_size_encoding_t) +
                              base->var_offset - (grp_dim->num_in_group - d->idx) * 16) + {{f.offset}};
{%                endif %}
   return xroad_str_len(obj->data, obj->length);
}

{%        elif f.type.type == "composite" %}
{%            for t in f.type.types %}
//--------------------------------------------------------------------------------------------------------------------//
{{t|c_type_decl}} {{package}}_{{prefix}}_get_{{f.name}}_{{t.name}}({{package}}_{{prefix}}_decoder_t* d)
{
{%                if is_grp == false %}
   decoder_t* base = &d->base;
   {{e.name}}_t* obj = ({{e.name}}_t*)(base->data + sizeof(message_header_t));
{%                else %}
   decoder_t* base = (decoder_t*)d->decoder;
   group_size_encoding_t* grp_dim = (group_size_encoding_t*)d->data;
   {{prefix}}_t* obj = ({{prefix}}_t*)(d->data + sizeof(group_size_encoding_t) +
                              base->var_offset - (grp_dim->num_in_group - d->idx) * 16) + {{f.offset}};
{%                endif %}
{%                if t.length > 1 and t.primitive_type == "char" %}
   if (val.len > {{t.length}} && base->cback)
   {
      (base->cback)({{package}}_log_level_warn, "data is too long for {{e.name}}_{{f.name}}_{{t.name}} field and will be truncated");
   }
   return xroad_str_len(obj->{{f.name}}, strnlen(obj->{{f.name}}, {{f.type.length}}));
{%                else %}
   return obj->{{f.name}}.{{t.name}};
{%                endif %}
}

{%            endfor %}
{%        elif f.type.type == "group" %}
//--------------------------------------------------------------------------------------------------------------------//
{{package}}_{{prefix}}_{{f.name}}_decoder_t* {{package}}_{{prefix}}_get_{{f.name}}({{package}}_{{prefix}}_decoder_t* d)
{
{%            if is_grp == false %}
   group_size_encoding_t* grp_dim = (group_size_encoding_t*)(d->base.data + d->base.var_offset + {{f.offset}});
{%            else %}
   {{package}}_{{m.name}}_decoder_t* decoder = ({{package}}_{{m.name}}_decoder_t*)d->decoder;
   group_size_encoding_t* grp_dim = (group_size_encoding_t*)d->data;
{%            endif %}
{%            if is_grp == false %}
   d->{{prefix}}_{{f.name}}_grp_decoder.decoder = d;
   d->{{prefix}}_{{f.name}}_grp_decoder.data = d->base.data + d->base.var_offset + {{f.offset}};
   //d->base.var_offset += num * 16;
   return &d->{{prefix}}_{{f.name}}_grp_decoder;
{%            else %}
   decoder->{{prefix}}_{{f.name}}_grp_decoder.decoder = decoder;
   decoder->{{prefix}}_{{f.name}}_grp_decoder.data = decoder->base.data + decoder->base.var_offset + {{f.offset}};
   //decoder->base.var_offset += num * 16;
   return &decoder->{{prefix}}_{{f.name}}_grp_decoder;
{%            endif %}
}

//--------------------------------------------------------------------------------------------------------------------//
uint16_t {{package}}_{{prefix}}_{{f.name}}_decode_get_idx({{package}}_{{prefix}}_{{f.name}}_decoder_t* d)
{
   return d->idx;
}

//--------------------------------------------------------------------------------------------------------------------//
{{package}}_{{prefix}}_{{f.name}}_decoder_t* {{package}}_{{prefix}}_{{f.name}}_decode_next({{package}}_{{prefix}}_{{f.name}}_decoder_t* d)
{
   group_size_encoding_t* grp_dim = (group_size_encoding_t*)d->data;
   d->idx += 1; // increment index
   if (d->idx == grp_dim->num_in_group)
   {
      return NULL;
   }
   return d;
}

{{            render_fields(m, f, prefix+"_"+f.name, true)-}}
{%        endif %}
{%    endfor %}
{% endmacro -%}

//--------------------------------------------------------------------------------------------------------------------//
void* {{package}}_decode(char* data, size_t len, {{package}}_logger_cback_t cback)
{
   if (len < sizeof(message_header_t))
   {
      cback({{package}}_log_level_error, "data is too short to decode");
      return NULL;
   }
   message_header_t* hdr = (message_header_t*)data;
   switch(hdr->template_id)
   {
{% for m in messages %}
      case {{package}}_template_{{m.name}}:
      {
         if (len < sizeof(message_header_t) + {{m.size}})
         {
            if (cback)
            {
               cback({{package}}_log_level_error, "data is too short to decode");
            }
            return NULL;
         }
         {{package}}_{{m.name}}_decoder_t* decoder = calloc(1, sizeof({{package}}_{{m.name}}_decoder_t));
         decoder->base.data = data;
         decoder->base.len = len;
         decoder->base.cback = cback;
         return decoder;
      }
{% endfor %}
      default:
      {
         if (cback)
         {
            cback({{package}}_log_level_error, "unknown template id");
         }
         return NULL;
      }
   }
}

//--------------------------------------------------------------------------------------------------------------------//
void {{package}}_destroy_decoder(void* decoder)
{
   free(decoder);
}

{% for m in messages %}
{{render_fields(m, m, m.name, false)-}}
{% endfor %}
